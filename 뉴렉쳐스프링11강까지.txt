
인터넷이 동작하기 위한 기본적 원리: 

서로 다른 컴퓨터가 서로 정보를 주고받기 위한 것.
웹서버가 설치된 컴퓨터: 도메인과 하드디스크- 저장소 존재
웹브라우저가 설치된 컴퓨터는 인터넷을 통해 전기적인 신호를 해당 도메인이 부여된 컴퓨터에 보냄. 특정 도메인을 가진 사이트를 달라고 요청.
웹서버가 설치된 컴퓨터는 그 웹사이트 파일을 코드로 보냄. (응답)
웹브라우저는 그것을 받아서 읽어 출력. 

웹서버와 웹브라우저는 서로 정보를 주고받음.

HTTP 프로토콜
HTTP: 서버와 클라이언트가 통신할 때 지켜야 할 통신 규약.
http header: 



-------------------------------------------------------


DAO: database의 data에 access하는 트랜잭션 객체. 저수준의 로직과 고급 비즈니스 로직을 분리하고 도메인 로직으로부터 ~~를 숨기기 위해 사용. 
트랜잭션: 업무처리의 최소 단위. 정상적으로 처리되면 커밋, 오류 발생하면 롤백해야 함. 복잡한 응용프로그래밍에서 갱신 도중 중단 시 발생할 수 있는 데이터 부정합을 방지하기 위해 사용.

Java EE: se 플랫폼 위에 구축되어 네트워크 애플리케이션을 개발, 실행하기 위한 api 및 런타임 환경 제공. servlet, json, api, 웹소켓 등 지원.
Spring이 JavaEE를 대체. 자바 EE가 제공하는 영역을 스프링이 더 잘 처리할 수 있음.


인터페이스 사용 - 인터페이스는 다양하게
객체 생성과 조립을 위한 외부 설정: 클래스와 클래스간 어떤 파일을 결합할것인가, 에 대한 부분을 외부파일로 빼, 나중에 수정이 일어났을 경우 그 부분만 수정해도 괜찮게 하기. 이때 사용하는 두가지 방법이 XML, 어노테이션.
XML, Annotation.

DI(Depencency Injection): 의존성 주입. 의존성 낮추기. 일체형이 아닌 조립형을 사용. 조립형의 장점은, 부품을 쉽게 바꿀 수 있다는 장점. 부품을 조립해야 하는 과정이 들어간다는 방법. 조립 방법은 세터를 통하는 방법, 생성자를 통해 주입한 방법. 근데 그 과정이 번거로움. 이것을 스프링의 도움을 받을 것임.

IOC: Inversion of Control. 제어의 역전. 메소드나 객체의 호출작업을 개발자가 결정하는 것이 아니라 외부에서 결정되는 것. 부품들이 조립되어 담겨있는 것.  

스프링은 Bean이라는 태그를 이용해 생성할 객체를 지시할 수 있음. 
이하 XML 태그 안::

어떤 클래스를 객체화할것인지, 어떤 이름으로 쓸 것인지 정할 수 있음. 생성할 객체명을 쓸 수 있고 ,,, 동명이인을 방지하기 위해 클래스 속성에는 패키지명까지 같이 써줘야 함.
Bean id = 변수명, class = 클래스 이름(패키지 명시해야 함)
property태그로 세터 함수를 작성할 수 있음. 원래 패키지에 세터가 무조건 있어야 함 ! ! 
name = 세터의 함수명. value = 파라미터로 주입할 객체의 이름.(bean으로 등록한 id), ref = ;


생성자에 파라미터로 값을 받아와야 할 경우 constructor-arg 태그로 파라미터를 넣을 수 있음. 생성자에 들어갈 파라미터 순서대로 constructor-arg를 세팅. 인덱스 지정 가능. (이것도 파라미터 순.) name 속성으로 조금 더 명시적으로 적을 수도 있음. type 속성으로 데이터타입 지정 가능.
Namespaces도 사용 가능 ... 이건 나중에 더 알아보쟈....
ex: <constructor-arg name = "kor" value = "10"/>

ApplicationContext context = new ClassPathXmlApplicationContext("config.xml");
context 객체가 생성한 bean을 읽어옴. getBeans로 그것을 호출할 수 있음.

Collection객체를 DI로 다루기
id는 자기가 정하고, class에는 Collection 객체가 저장된 클래스명(패키지명 포함)을 명시.
list 태그를 이용해 정적인 방식으로 초기화하고자 하는 객체를 추가할 수 있음. 예를 들어, 위에서 만든 Bean을 추가할 수 있음. 혹은 새 빈을 만들거나.
ref 태그: 레퍼런스.









